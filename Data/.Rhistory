filter(weight < 81) %>%
group_by(AnimalID) %>%
summarise(avgGroupSize.1yr = mean(GroupSize),
FirstGroupSize = GroupSize[which(DateofCapture == min(DateofCapture))],
n.GroupSizeMeasures = n())
# Males:
groupsizeunder1year.males <- malebodymass %>%
dplyr::select(-DateofRecapture, -weight2, -GroupSizeRecapture, -QueenID, -timediff, -rateofbodymassgrowth, -GroupSize.s) %>%
right_join(malesunder1yr, by = "AnimalID") %>%
mutate(DateofCapture = as.Date(strptime(DateofCapture, format = "%d/%m/%Y"))) %>%
mutate(timesincefirstcapture = as.numeric(difftime(DateofCapture, FirstCapture, units = c("days")))) %>%
filter(weight < 101) %>%
group_by(AnimalID) %>%
summarise(avgGroupSize.1yr = mean(GroupSize),
FirstGroupSize = GroupSize[which(DateofCapture == min(DateofCapture))],
n.GroupSizeMeasures = n())
massover1yrfem <- massover1yrfem %>%
left_join(groupsizeunder1year)
massover1yr <- massover1yr %>%
left_join(groupsizeunder1year.males)
# Statistically test these effects #
library(lme4) ; library(multcomp)
# In males:
#-----------
# include time of year
massover1yr <- massover1yr %>%
mutate(month = lubridate::month(DateofCapture),
MonthlyQuarter = as.factor(case_when(month %in% 1:3 ~ "first",
month %in% 4:6 ~ "second",
month %in% 7:9 ~ "third",
month %in% 10:12 ~ "fourth")))
# how correlated are average group size below one year and group size in adulthood
plot(GroupSize ~ avgGroupSize.1yr, data = massover1yr) # males- not that correlated
abline(lm(GroupSize ~ avgGroupSize.1yr, data = massover1yr), col = "red")
cor.test(massover1yr$GroupSize, massover1yr$avgGroupSize.1yr)
massover1yr$avgGroupSize.1yr.s <- as.numeric(scale(massover1yr$avgGroupSize.1yr))
mod1 <- lme4::lmer(weight ~ GroupSizeCat + MonthlyQuarter + avgGroupSize.1yr.s + (1|GroupID/AnimalID), data = massover1yr) # very small differences in reality in both sexes in adulthood
summary(mod1)
anova(mod1)
plot(mod1)
anova(mod1, update(mod1, ~. -GroupSizeCat))
anova(mod1, update(mod1, ~. -MonthlyQuarter))
anova(mod1, update(mod1, ~. -avgGroupSize.1yr.s))
summary(glht(mod1, linfct = mcp(GroupSizeCat = "Tukey")), test = adjusted("holm"))
# plot the marginal effects
p1 <- ggeffects::ggpredict(mod1, terms = "GroupSizeCat") %>%
data.frame() %>%
rename(GroupSizeCat = x, weight = predicted)
plot1 <- ggplot(p1, aes(GroupSizeCat, weight)) +
geom_errorbar(aes(ymin=weight-1.96*std.error, ymax=weight+1.96*std.error), width=.2, size = 1.2) +
geom_jitter(data = massover1yr, aes(col = GroupSizeCat),  width = 0.1, size = 2, alpha = 0.4) +
scale_colour_manual(values = c("#56B4E9","#009E73", "#0072B2")) +
theme_bw() +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 12),
legend.position = "none") +
ylab("Body Mass, g") +
xlab("Group Size Category")
summary(mod1)
p2 <- ggeffects::ggpredict(mod1, terms = "avgGroupSize.1yr.s")
plot2 <- plot(p2) +
theme_bw() +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 12),
legend.position = "none") +
ylab("Body Mass, g") +
xlab("Average group size in first year of life")
p1 <- ggeffects::ggpredict(mod1, terms = "GroupSizeCat") %>%
data.frame() %>%
rename(GroupSizeCat = x, weight = predicted)
install.packages("ggeffects")
p1 <- ggeffects::ggpredict(mod1, terms = "GroupSizeCat") %>%
data.frame() %>%
rename(GroupSizeCat = x, weight = predicted)
plot1 <- ggplot(p1, aes(GroupSizeCat, weight)) +
geom_errorbar(aes(ymin=weight-1.96*std.error, ymax=weight+1.96*std.error), width=.2, size = 1.2) +
geom_jitter(data = massover1yr, aes(col = GroupSizeCat),  width = 0.1, size = 2, alpha = 0.4) +
scale_colour_manual(values = c("#56B4E9","#009E73", "#0072B2")) +
theme_bw() +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 12),
legend.position = "none") +
ylab("Body Mass, g") +
xlab("Group Size Category")
summary(mod1)
p2 <- ggeffects::ggpredict(mod1, terms = "avgGroupSize.1yr.s")
plot2 <- plot(p2) +
theme_bw() +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 12),
legend.position = "none") +
ylab("Body Mass, g") +
xlab("Average group size in first year of life")
# In Females: Female mass in adulthood
#--------------------------------------
massover1yrfem <- massover1yrfem %>%
mutate(month = lubridate::month(DateofCapture),
MonthlyQuarter = as.factor(case_when(month %in% 1:3 ~ "first",
month %in% 4:6 ~ "second",
month %in% 7:9 ~ "third",
month %in% 10:12 ~ "fourth")))
massover1yrfem$avgGroupSize.1yr.s <- as.numeric(scale(massover1yrfem$avgGroupSize.1yr))
mod2 <- lme4::lmer(weight ~ GroupSizeCat + MonthlyQuarter  + avgGroupSize.1yr.s + (1|GroupID/AnimalID), data = massover1yrfem) # very small differences in reality in both sexes in adulthood
summary(mod2)
anova(mod2)
plot(mod2)
anova(mod2, update(mod2, ~. -GroupSizeCat))
anova(mod2, update(mod2, ~. -MonthlyQuarter))
anova(mod2, update(mod2, ~. -avgGroupSize.1yr.s))
summary(glht(mod2, linfct = multcomp::mcp(GroupSizeCat = "Tukey")), test = adjusted("holm"))
# plot the marginal effects
p3 <- ggeffects::ggpredict(mod2, terms = "GroupSizeCat") %>%
data.frame() %>%
rename(GroupSizeCat = x, weight = predicted)
plot3 <- ggplot(p3, aes(GroupSizeCat, weight)) +
geom_errorbar(aes(ymin=weight-1.96*std.error, ymax=weight+1.96*std.error), width=.2, size = 1.2) +
geom_jitter(data = massover1yrfem, aes(col = GroupSizeCat),  width = 0.1, size = 2, alpha = 0.4) +
scale_colour_manual(values = c("#56B4E9","#009E73", "#0072B2")) +
theme_bw() +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 12),
legend.position = "none") +
ylab("Body Mass, g") +
xlab("Group Size Category")
p3 <- ggeffects::ggpredict(mod2, terms = "avgGroupSize.1yr.s")
plot4 <- plot(p3) +
theme_bw() +
theme(axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
axis.title = element_text(size = 12),
legend.position = "none") +
ylab("Body Mass, g") +
xlab("Average group size in first year of life")
plot4
plot4 <- plot(p3) +
theme_bw() +
theme(axis.text. = element_text(size = 12),
axis.title = element_text(size = 12),
legend.position = "none") +
ylab("Body Mass, g") +
xlab("Average group size in first year of life")
plot4
plot4 <- plot(p3) +
theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 12),
legend.position = "none") +
ylab("Body Mass, g") +
xlab("Average group size in first year of life")
plot4
library(smatr) ; library(lme4) ; library(tidyverse)
# In this script we explore the body condition of single females in comparison to within-group non-breeders.
teethwidth <- read.csv("FieldMR_SingleFemaleCondition_TeethWidth.csv", header = TRUE) # Females(first captured < 80g)
bodylength <- read.csv("FieldMR_SingleFemaleCondition_BodyLength.csv", header = TRUE) # Females(first captured < 80g)
# Following Peig and Green 2009
#--------------------------------
# Step 1) Plot allometric relationship on a ln scale
# body length ~ incisor width
plot(log(weight) ~ log(TeethWidth), data = teethwidth, las = 1, ylab = "ln Mass, g", xlab = "ln Incisor Width, mm", col = adjustcolor("grey30", alpha.f = 0.6))
points(log(weight) ~ log(TeethWidth), data = subset(teethwidth, statecode == "single"), col = adjustcolor("darkorange", alpha.f = 0.5), pch = 16)
# body length ~ incisor width
plot(log(weight) ~ log(TeethWidth), data = teethwidth, las = 1, ylab = "ln Mass, g", xlab = "ln Incisor Width, mm", col = adjustcolor("grey30", alpha.f = 0.6))
points(log(weight) ~ log(TeethWidth), data = subset(teethwidth, statecode == "single"), col = adjustcolor("darkorange", alpha.f = 0.5), pch = 16)
# body mass ~ body length
plot(log(weight) ~ log(BodyLength), data = bodylength, las = 1, ylab = "ln Mass, g", xlab = "ln Body Length, cm", col = adjustcolor("grey30", alpha.f = 0.6))
points(log(weight) ~ log(BodyLength), data = subset(bodylength, statecode == "single"), col = adjustcolor("darkorange", alpha.f = 0.5), pch = 16)
# Step 2) Perform a standard major axis regression on logged weights using the smatr package
teethwidth$weight.ln <- log(teethwidth$weight)
bodylength$weight.ln <- log(bodylength$weight)
teethwidth$teethwidth.ln <- log(teethwidth$TeethWidth)
bodylength$bodylength.ln <- log(bodylength$BodyLength)
sma <- sma(weight.ln ~ teethwidth.ln, data = teethwidth) # slope = 2.565642
#sma.rob <- sma(weight.ln ~ teethwidth.ln, data = teethwidth, robust = T) # 2.662088
sma2 <- sma(weight.ln ~ bodylength.ln, data = bodylength) # slope = 3.336605
#sma.rob2 <- sma(weight.ln ~ bodylength.ln, data = bodylength, robust = T) # slope = 3.349365
summary(sma)
summary(sma2)
x.0 <- mean(teethwidth$teethwidth)  # 1.75
teethwidth$massindex <- teethwidth$weight * (x.0 / teethwidth$teethwidth) ^ 2.565642
x.1 <- mean(bodylength$BodyLength)   # 17.53
bodylength$massindex <- bodylength$weight * (x.1 / bodylength$BodyLength) ^ 3.336605
x.1
# note that in the above I have assumed that males and females have the same scaling relationship
sma.bystatecode <- sma(teethwidth.ln ~ weight.ln + statecode, data = teethwidth)
summary(sma.bystatecode) # the output suggests that this is completely valid- no sex difference in scaling
sma2.bystatecode <- sma(bodylength.ln ~ weight.ln + statecode, data = bodylength)
summary(sma2.bystatecode) # the output suggests that this is completely valid- no sex difference in scaling
preds <- data.frame(expand.grid(teethwidth.ln = seq(min(teethwidth$teethwidth.ln), max(teethwidth$teethwidth.ln), length.out = 200)))
# bootstrap data and get predictions
preds <- teethwidth %>%
# create new bootstrapped data sets
modelr::bootstrap(n = 1000, id = 'boot_num') %>%
# fit sma to every bootstrap
group_by(boot_num) %>%
mutate(., fit = map(strap, ~ sma(weight.ln ~ teethwidth.ln, data=data.frame(.), method="SMA"))) %>%
ungroup() %>%
# extract intercept and slope from each fit
mutate(., intercept = map_dbl(fit, ~coef(.x)[1]),
slope = map_dbl(fit, ~coef(.x)[2])) %>%
dplyr::select(., -fit) %>%
# get fitted values for each bootstrapped model
# uses the preds dataframe we made earlier
group_by(boot_num) %>%
do(data.frame(fitted = .$intercept + .$slope*preds$teethwidth.ln,
teethwidth.ln = preds$teethwidth.ln)) %>%
ungroup()
preds <- preds %>%
# calculate the 2.5% and 97.5% quantiles at each teeth width value
group_by(., teethwidth.ln) %>%
dplyr::summarise(., conf_low = quantile(fitted, 0.025),
conf_high = quantile(fitted, 0.975)) %>%
ungroup()  %>%
data.frame()
# plot the results of the best fitting SMA regression for body mass on teethwidth
plot(log(weight) ~ log(TeethWidth), data = teethwidth, las = 1, ylab = "ln Mass, g", xlab = "ln Incisor Width, mm", col = adjustcolor("grey30", alpha.f = 0.6), ylim = c(4.3, 5.3))
points(log(weight) ~ log(TeethWidth), data = filter(teethwidth, statecode == "single"), col = adjustcolor("darkorange", alpha.f = 0.5), pch = 16)
polygon(c(preds$teethwidth.ln, rev(preds$teethwidth.ln)),
c(preds$conf_low, rev(preds$conf_high)),
col= adjustcolor("red", alpha.f = 0.2),border=NA)
abline(a = 0.24130990, b = 2.565642, col = "black", lwd = 2) # summary(sma)
# Model this in lmer to control for repeat measures on individuals.
conditionmod <- lme4::lmer(massindex ~ statecode + (1|AnimalID),
data = teethwidth)
summary(conditionmod)
# plot the results of the best fitting SMA regression for body mass on body length
preds2 <- data.frame(expand.grid(bodylength.ln = seq(min(bodylength$bodylength.ln),
max(bodylength$bodylength.ln), length.out = 200)))
# bootstrap data and get predictions
preds2 <- bodylength %>%
# create new bootstrapped data sets
modelr::bootstrap(n = 1000, id = 'boot_num') %>%
# fit sma to every bootstrap
group_by(boot_num) %>%
mutate(., fit = map(strap, ~ sma(weight.ln ~ bodylength.ln, data=data.frame(.), method="SMA"))) %>%
ungroup() %>%
# extract intercept and slope from each fit
mutate(., intercept = map_dbl(fit, ~coef(.x)[1]),
slope = map_dbl(fit, ~coef(.x)[2])) %>%
dplyr::select(., -fit) %>%
# get fitted values for each bootstrapped model
# uses the preds dataframe we made earlier
group_by(boot_num) %>%
do(data.frame(fitted = .$intercept + .$slope*preds2$bodylength.ln,
bodylength.ln = preds2$bodylength.ln)) %>%
ungroup()
preds2 <- preds2 %>%
# calculate the 2.5% and 97.5% quantiles at each teeth width value
group_by(., bodylength.ln) %>%
dplyr::summarise(., conf_low = quantile(fitted, 0.025),
conf_high = quantile(fitted, 0.975)) %>%
ungroup()  %>%
data.frame()
# plot the results of the best fitting SMA regression for body mass on teethwidth
plot(log(weight) ~ log(BodyLength), data = bodylength, las = 1, ylab = "ln Mass, g",
xlab = "ln Body Length, cm", col = adjustcolor("grey30", alpha.f = 0.6))
points(log(weight) ~ log(BodyLength), data = filter(bodylength, statecode == "single"),
col = adjustcolor("darkorange", alpha.f = 0.5), pch = 16)
polygon(c(preds2$bodylength.ln, rev(preds2$bodylength.ln)),
c(preds2$conf_low, rev(preds2$conf_high)),
col= adjustcolor("red", alpha.f = 0.2),border=NA)
abline(a = -4.833573 , b = 3.336605, col = "black", lwd = 2) # summary(sma2)
# Model this in lmer to control for repeat measures on individuals.
conditionmod2 <- lmer(massindex ~ statecode + (1|AnimalID),
data = bodylength)
summary(conditionmod2)
library(glmmTMB) ; library(tidyverse)
# load in the recruitment datasets
longitudinal <- read.csv("FieldMR_Recruitment_Longitudinal.csv", header = TRUE)  # "FieldMR_Recruitment_Longitudinal.csv"
experimental <- read.csv("FieldMR_Recruitment_Experimental.csv", header = TRUE)  # "FieldMR_Recruitment_Experimental.csv"
#  Scale the various continous variables
longitudinal$GroupSize.s <- as.numeric(scale(longitudinal$GroupSizeAtFirstCapture))
longitudinal$QueenWeight.s <- as.numeric(scale(longitudinal$QueenWeight))
longitudinal$Rainfall1.s <- as.numeric(scale(longitudinal$Rainfall1)) # 1) sum rainfall to the year before the start of the capture period
longitudinal$Rainfall2.s <- as.numeric(scale(longitudinal$Rainfall2)) # 2) Geometric mean rainfall in the year before the start
longitudinal$Rainfall3.s <- as.numeric(scale(longitudinal$Rainfall3)) # 3) Arithmetic mean rainfall in the year before the start
longitudinal$Rainfall4.s <- as.numeric(scale(longitudinal$Rainfall4)) # 4) sum within the trapping interval
longitudinal$Rainfall5.s <- as.numeric(scale(longitudinal$Rainfall5)) # 5) geometric mean monthly in the trapping interval
longitudinal$Rainfall6.s <- as.numeric(scale(longitudinal$Rainfall6)) # 6) Arithmetic mean rainfall in the year before the start
# fit a poisson and negative binomial to a baseline model first to see what is going on
mod1 <- glmmTMB(WithinGroupRecruits ~ GroupSize.s + QueenWeight.s + offset(log(TimeToNextCap))
+ (1|GroupID),
family = "poisson",
data = longitudinal)
mod2 <- update(mod1, ~., family = "nbinom2")
mod2
AIC(mod1, mod2) # Here the poisson is a better fit
# ov
overdisp_fun <- function(model) {
rdf <- df.residual(model)
rp <- residuals(model,type="pearson")
Pearson.chisq <- sum(rp^2)
prat <- Pearson.chisq/rdf
pval <- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE)
c(chisq=Pearson.chisq,ratio=prat,rdf=rdf,p=pval)
}
overdisp_fun(mod1)
# check residuals of the Poisson models
simulationOutput.mod1 <- DHARMa::simulateResiduals(fittedModel = mod1, n = 250)
plot(simulationOutput.mod1) # look alright
hist(simulationOutput.mod1)
# random effects significant?
anova(mod1, update(mod1, ~. -(1|GroupID))) # groupID significant at alpha = 0.05 in the Poisson
mod1.1 <- update(mod1, ~. + Rainfall1.s)
mod1.2 <- update(mod1, ~. + Rainfall2.s) # best fitting rainfall term
mod1.3 <- update(mod1, ~. + Rainfall3.s)
mod1.4 <- update(mod1, ~. + Rainfall4.s)
mod1.5 <- update(mod1, ~. + Rainfall5.s)
mod1.6 <- update(mod1, ~. + Rainfall6.s)
summary(mod1.2)
AIC(mod1.1, mod1.2, mod1.3, mod1.4, mod1.5, mod1.6)
newdat <- data.frame(GroupSize.s = (seq(2, 26, 0.5) - mean(longitudinal$GroupSizeAtFirstCapture))/sd(longitudinal$GroupSizeAtFirstCapture),
QueenWeight.s = 0, TimeToNextCap = 180, NewRecruits = 0, Rainfall2.s = 9, GroupID = NA)
preds <- predict(mod1,newdat, re.form=NA, se.fit = TRUE)
newdat$pred <- exp(preds$fit)
newdat$ulimit <- exp(preds$fit + qnorm(0.975)*(preds$se.fit)) # needs to be on the correct scale when getting them
newdat$llimit <- exp(preds$fit - qnorm(0.975)*(preds$se.fit))
newdat$GroupSize <- seq(2, 26, 0.5)
plot(withingrouprecruitmentrate.6mo ~ GroupSizeAtFirstCapture, data = longitudinal, las = 1, type = "n",
ylab = "Recruitment rate, within-group recruits per 6 months", xlab = "Group Size, t",
xlim = c(0, 26),
bty = "l")
axis(1, at = seq(0, 26, 1), label = NA)
with(newdat, polygon(c(GroupSize, rev(GroupSize)), c(ulimit, rev(llimit)), col = adjustcolor("darkorange", alpha.f = 0.3), border = NA))
with(newdat, points(pred ~ GroupSize, type = "l", col = "darkorange", lwd = 3))
points(withingrouprecruitmentrate.6mo ~ GroupSizeAtFirstCapture, data = longitudinal, col =  adjustcolor("black", alpha.f = 0.9), cex = 1.2)
mean(longitudinal$TimeToNextCap) ; sd(longitudinal$withingrouprecruitmentrate.6mo)
summary(mod1.2)
summary(update(mod1.2, ~.-GroupSize.s + AvgGroupSize))
summary(update(mod1.2, ~.-GroupSize.s + AvgGroupSizeWoutRecruits)) # doesn't make much difference.
mean(experimental$TimeToNextCap[experimental$Treatment == "EstablishedGroup"])
sd(experimental$TimeToNextCap[experimental$Treatment == "EstablishedGroup"])
mean(experimental$TimeToNextCap[experimental$Treatment == "ExperimentalPairing"])
sd(experimental$TimeToNextCap[experimental$Treatment == "ExperimentalPairing"])
t.test(experimental$TimeToNextCap[experimental$Treatment == "EstablishedGroup"],
experimental$TimeToNextCap[experimental$Treatment == "ExperimentalPairing"])
# Welch's t=test, t = -1.4674, df = 14.14, p-value = 0.1642
t.test(experimental$WithinGroupRecruits[experimental$Treatment == "EstablishedGroup"],
experimental$WithinGroupRecruits[experimental$Treatment == "ExperimentalPairing"])
# Welch's t=test, t = 0.25233, df = 14.022, p-value = 0.8044
library(tidyverse) ;  library(msm) ; library(msmtools)
# call in the data
femalephilopatry.df <- read.csv("FieldMR_Femalephilopatry.csv", header = TRUE)
malephilopatry.df <- read.csv("FieldMR_Malephilopatry.csv", header = TRUE)
philopatry.df <- rbind(femalephilopatry.df, malephilopatry.df)
statetable.msm(state, AnimalID, data = philopatry.df)
# set up the q matrix for the transitions (assume that individuals can transition from non-breeder to gone or known out of group)
philopatry.q <- rbind(c(0, 0.5),
c(0, 0)) # assuming about 1 year in state 1 before disappearing
philopatry.df$Sex <- as.factor(philopatry.df$Sex)
rownames(philopatry.q) <- colnames(philopatry.q) <- c("ingroup", "Disappeared/Dispersed")
philopatry.msm <- msm(state ~ Time.years, subject = AnimalID, censor = 99, censor.states = c(1),
covariates = ~ Sex, data = philopatry.df, qmatrix = philopatry.q, na.action = na.fail,
control = list(fnscale = 4000, maxit = 10000))
philopatry.msm
summary(philopatry.msm)
hazard.msm(philopatry.msm) # n.s.
weightless <- philopatry.df %>%
filter(is.na(weight), statecode != "Disappeared", is.na(censor)) %>%
.$AnimalID
philopatry.df2 <- philopatry.df %>%
filter(!(AnimalID %in% weightless))
# easiest to remove the NAs before rebinding
philopatry.df2 <- philopatry.df2 %>%
filter(!is.na(weight)) %>%
group_by(Sex) %>%
mutate(ScaledWeight = as.numeric(scale(weight))) %>%
bind_rows(philopatry.df2 %>%
filter(is.na(weight))) %>%
arrange(AnimalID, CaptureStart) %>%
data.frame()
philopatry.q2 <- rbind(c(0, 0.5),
c(0, 0)) # set up the q matrix
rownames(philopatry.q2) <- colnames(philopatry.q) <- c("ingroup", "Disappeared/Dispersed")
philopatry.df2$Rainfall.s <- as.numeric(scale(philopatry.df2$Rainfall))
philopatry.msm.2 <- msm(state ~ Time.years, subject = AnimalID, censor = 99, censor.states = c(1),
covariates = ~ Sex + ScaledWeight + Rainfall.s, data = philopatry.df2,
qmatrix = philopatry.q, na.action = na.fail,
control = list(fnscale = 4000, maxit = 10000))
philopatry.msm.2
summary(philopatry.msm.2)
hazard.msm(philopatry.msm.2)
par(mfrow = c(1,1))
plot.survfit.msm(philopatry.msm.2, from = 1, las = 1) # overall
par(mfrow = c(1,2))
plot.survfit.msm(philopatry.msm.2, from = 1, las = 1,
covariates = list(Sex = "Female", "Rainfall.s" = 0, "ScaledWeight"  = 0),
interp = "midpoint", xlab = "Time since first captured, years",
ylab = "Probability of presence in natal group", range = c(0,4))
plot.survfit.msm(philopatry.msm, from = 1, las = 1,
covariates = list(Sex = "Male", "Rainfall.s" = 0, "ScaledWeight"  = 0),
interp = "midpoint", xlab = "Time since first captured, years",
ylab = "Probability of presence in natal group", range = c(0,4))
# note that fits a different curve but maintains the empirical data so need to extract this separately for males and females from above and combine the plots together
# get the prevalences to compare Females to Males
plot.prevalence.msm(philopatry.msm.2, xlab =  "Time since first captured, years")
philopatry.prevalence.msm.females <- msm:::prevalence.msm(philopatry.msm.2, ci = "normal",
covariates = list(Sex = "Female",
Rainfall.s = 0,
ScaledWeight = 0))
philopatry.prevalence.msm.males <- msm:::prevalence.msm(philopatry.msm.2, ci = "normal",
covariates = list(Sex = "Male",
Rainfall.s = 0,
ScaledWeight = 0))
#  tidy into a easier format
# females, observed prevalence
femalephilopatry.observed <- philopatry.prevalence.msm.females[[3]] %>%
data.frame() %>%
mutate(Time = as.numeric(row.names(.))) %>%
rename(ingroup = names(.)[1], outgroup = names(.)[2]) %>%
pivot_longer(-Time, names_to = "state", values_to = "observedprevalence")
# females, expected percentage/prevalence - mean
femalephilopatry.expected <- philopatry.prevalence.msm.females$`Expected percentages`$estimates %>%
data.frame() %>%
mutate(Time = as.numeric(row.names(.))) %>%
rename(ingroup = names(.)[1], outgroup = names(.)[2]) %>%
pivot_longer(-Time, names_to = "state", values_to = "expectedprevalence")
#  females, expected percentage/prevalence - l95%CI
femalephilopatry.expected.lci <- philopatry.prevalence.msm.females$`Expected percentages`$ci[,,1]%>%
data.frame() %>%
mutate(Time = unique(femalephilopatry.expected$Time)) %>%
rename(ingroup = names(.)[1], outgroup = names(.)[2]) %>%
pivot_longer(-Time, names_to = "state", values_to = "l95ci")
#  females, expected percentage/prevalence - u95%CI
femalephilopatry.expected.uci <- philopatry.prevalence.msm.females$`Expected percentages`$ci[,,2]%>%
data.frame() %>%
mutate(Time = unique(femalephilopatry.expected$Time)) %>%
rename(ingroup = names(.)[1], outgroup = names(.)[2]) %>%
pivot_longer(-Time, names_to = "state", values_to = "u95ci")
plot.prevalence.msm(philopatry.msm.2, xlab =  "Time since first captured, years")
?plot.prevalence.msm
philopatry.msm.2
# get the prevalences to compare Females to Males
plot.prevalence.msm(philopatry.msm.2, xlab =  "Time since first captured, years")
philopatry.prevalence.msm.females <- msm:::prevalence.msm(philopatry.msm.2, ci = "normal",
covariates = list(Sex = "Female",
Rainfall.s = 0,
ScaledWeight = 0))
philopatry.prevalence.msm.males <- msm:::prevalence.msm(philopatry.msm.2, ci = "normal",
covariates = list(Sex = "Male",
Rainfall.s = 0,
ScaledWeight = 0))
#  tidy into a easier format
# females, observed prevalence
femalephilopatry.observed <- philopatry.prevalence.msm.females[[3]] %>%
data.frame() %>%
mutate(Time = as.numeric(row.names(.))) %>%
rename(ingroup = names(.)[1], outgroup = names(.)[2]) %>%
pivot_longer(-Time, names_to = "state", values_to = "observedprevalence")
# females, expected percentage/prevalence - mean
femalephilopatry.expected <- philopatry.prevalence.msm.females$`Expected percentages`$estimates %>%
data.frame() %>%
mutate(Time = as.numeric(row.names(.))) %>%
rename(ingroup = names(.)[1], outgroup = names(.)[2]) %>%
pivot_longer(-Time, names_to = "state", values_to = "expectedprevalence")
#  females, expected percentage/prevalence - l95%CI
femalephilopatry.expected.lci <- philopatry.prevalence.msm.females$`Expected percentages`$ci[,,1]%>%
data.frame() %>%
mutate(Time = unique(femalephilopatry.expected$Time)) %>%
rename(ingroup = names(.)[1], outgroup = names(.)[2]) %>%
pivot_longer(-Time, names_to = "state", values_to = "l95ci")
femalephilopatry.expected.uci <- philopatry.prevalence.msm.females$`Expected percentages`$ci[,,2]%>%
data.frame() %>%
mutate(Time = unique(femalephilopatry.expected$Time)) %>%
rename(ingroup = names(.)[1], outgroup = names(.)[2]) %>%
pivot_longer(-Time, names_to = "state", values_to = "u95ci")
femalephilopatry.expected <- femalephilopatry.expected %>% # put together
left_join(femalephilopatry.expected.lci) %>%
left_join(femalephilopatry.expected.uci) %>%
filter(state== "ingroup")
malephilopatry.observed <- philopatry.prevalence.msm.males[[3]] %>%
data.frame() %>%
mutate(Time = as.numeric(row.names(.))) %>%
rename(ingroup = names(.)[1], outgroup = names(.)[2]) %>%
pivot_longer(-Time, names_to = "state", values_to = "observedprevalence")
malephilopatry.expected <- philopatry.prevalence.msm.males$`Expected percentages`$estimates %>%
data.frame() %>%
mutate(Time = as.numeric(row.names(.))) %>%
rename(ingroup = names(.)[1], outgroup = names(.)[2]) %>%
pivot_longer(-Time, names_to = "state", values_to = "expectedprevalence")
malephilopatry.expected.lci <- philopatry.prevalence.msm.males$`Expected percentages`$ci[,,1]%>%
data.frame() %>%
mutate(Time = unique(malephilopatry.expected$Time)) %>%
rename(ingroup = names(.)[1], outgroup = names(.)[2]) %>%
pivot_longer(-Time, names_to = "state", values_to = "l95ci")
malephilopatry.expected.uci <- philopatry.prevalence.msm.males$`Expected percentages`$ci[,,2]%>%
data.frame() %>%
mutate(Time = unique(malephilopatry.expected$Time)) %>%
rename(ingroup = names(.)[1], outgroup = names(.)[2]) %>%
pivot_longer(-Time, names_to = "state", values_to = "u95ci")
malephilopatry.expected <- malephilopatry.expected %>%  # put together
left_join(malephilopatry.expected.lci) %>%
left_join(malephilopatry.expected.uci) %>%
filter(state== "ingroup") %>%
data.frame()
plot(expectedprevalence ~ Time, data = subset(femalephilopatry.expected, state == "ingroup"), type = "n", las = 1, bty = "l", ylab= "Probability of presence in natal group (%)", xlab = 'Time since first captured \n as non-breeding male, years', ylim = c(0, 101), xlim = c(0, 5))
with(femalephilopatry.expected,
polygon(c(Time, rev(Time)), c(l95ci, rev(u95ci)),
col = adjustcolor("#1F9E89FF", alpha = 0.2), border = NA))
with(malephilopatry.expected,
polygon(c(Time, rev(Time)), c(l95ci, rev(u95ci)),
col = adjustcolor("black", alpha = 0.1), border = NA))
points(expectedprevalence ~ Time,
data = femalephilopatry.expected, type = "l", col = "#1F9E89FF", lwd = 2) # expected
points(expectedprevalence ~ Time, data = subset(malephilopatry.expected, state == "ingroup"), type = "l", col = "black", lwd = 2) # expected
axis(1, at = seq(0, 5, 0.5), labels = NA)
axis(2, at = seq(0, 100, 10), labels = NA)
legend("topright", legend = c("Female", "Male"), lwd = c(2,2), bty = "n", col = c("#1F9E89FF", "black"))
